@page "/Rl/{videoId?}"
@using Jaydlc.Core
@using System.Collections.Specialized
@using Microsoft.Extensions.Logging
@inject VideoManager VideoManager
@inject ILogger<Rl> Logger
@inject NavigationManager NavManager

@if (VideoId is null)
{
    <Title Value="Jay's RL Clips"/>

   @* <button class="btn btn-primary" @onclick="UpdateVideos">Update Videos</button> *@
    <div class="row">
        @foreach (var video in VideoManager.Videos.OrderBy(x => x.Title))
        {
            <MatCard Class="video-card col-lg-3 col-xs-1 m-2" @onclick="() => VideoSelected(video.Id)">
                <MatCardContent>
                    <MatCardMedia Wide="true" Class="video-thumbnail" ImageUrl="@video.Thumbnail"></MatCardMedia>
                    <div style="padding: 1rem">
                        <MatHeadline6 Class="video-title">@video.Title</MatHeadline6>
                        <MatSubtitle2 Class="video-date">@video.ParsedUploadDate.ToShortDateString()</MatSubtitle2>
                    </div>

                    <MatBody2 Class="video-desc">
                        @video.Description
                    </MatBody2>
                </MatCardContent>
            </MatCard>
        }
    </div>
}
else
{
    if (VideoManager.Videos.Any(x => x.Id == VideoId))
    {
        var video = VideoManager.Videos.SingleOrDefault(x => x.Id == VideoId);
        <Title Value="@video.Title"/>

        <LinkedVideo VideoId="@video.Id"/>
    }
}


@code {

    [Parameter]
    public string? VideoId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
    // TODO: This update task blocks the page from loading.
    // Either need to figure out how to run in background with progress updates or run from separate (admin?) page.
        if (VideoId?.ToLower() == "update")
        {
            NavManager.NavigateTo("/rl");
            InvokeAsync(UpdateVideos);
        }
        VideoManager.Videos.CollectionChanged += VideosUpdated;
    }

    private void VideosUpdated(object? sender, NotifyCollectionChangedEventArgs e)
    {
        this.InvokeAsync(StateHasChanged);
    }

    private async Task UpdateVideos()
    {
        await VideoManager.DownloadPlaylistInfo("/tmp/youtubedl");
    }

    private void VideoSelected(string id)
    {
        NavManager.NavigateTo($"/rl/{id}");
    }

}